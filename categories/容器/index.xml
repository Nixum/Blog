<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>容器 on Nixum Blog</title>
    <link>http://nixum.cc/categories/%E5%AE%B9%E5%99%A8/</link>
    <description>Recent content in 容器 on Nixum Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://nixum.cc/categories/%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>容器</title>
      <link>http://nixum.cc/p/%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/%E5%AE%B9%E5%99%A8/</guid>
      <description>[TOC]
底层原理 容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个边界。
Namespace - 隔离 进程只能看到被规定的视图，即 隔离，比如通过docker启动一个/bin/sh，再在容器里通过ps命令查看该/bin/sh进程的pid，会发现它的pid是1，但是实际上它在外部的宿主机里的pid是10，使得让在容器里运行的进程以为自己就在一个独立的空间里，实际上只是进行了逻辑的划分，本质还是依赖宿主机。
作用：在同一台宿主机上运行多个用户的容器，充分利用系统资源；不同用户之间不能访问对方的资源，保证安全。
常见的Namespace类型有：
 PID Namespace：隔离不同容器的进程 Network Namespace：隔离不同容器间的网络 Mount Namespace：隔离不同容器间的文件系统  与虚拟化的区别：虚拟化是在操作系统和硬件上进行隔离，虚拟机上的应用需要经过虚拟机再经过宿主机，有两个内核，本身就有消耗，而容器化后的应用仅仅只是宿主机上的进程而已，只用到宿主机一个内核；
因为namespace隔离的并不彻底，由于内核共享，容器化应用仍然可以把宿主机的所有资源都吃掉，有些资源不能通过namespace隔离，比如修改了容器上的时间，宿主机上的时间也会被改变，因此需要Cgroups；
Cgroups - 资源限制 是用来制造约束的主要手段，即控制进程组的优先级，设置进程能够使用的资源上限，如CPU、内存、IO设备的流量等
比如，限定容器只能使用宿主机20%的CPU
1  docker run -it --cpu-period=100000 --cpu-quota=20000 ubuntu /bin/bash    Cgroups 通过不同的子系统限制了不同的资源，每个子系统限制一种资源。每个子系统限制资源的方式都是类似的，就是把相关的一组进程分配到一个控制组里，然后通过树结构进行管理，每个控制组都设有自己的资源控制参数。
 相互关系：
每个子系统是一个控制组，每个控制组可以被看作是一个树的节点，每个控制组下可以有多个子节点，比如我们在在CPU子系统中，创建一个DB控制组，然后把所有运行的数据库服务放在其中，然后再在该组下再创建 MySQL和MongoDB两个子组来，分别划分不同的使用资源，所以形成了一颗树，大致就如下图
 
/sys/fs/cgroup/cpu/{task}/目录表示task这个任务挂在了CPU Cgroup下，在这个目录下有很多的配置文件，比如cpu.cfd_quota_us、cgroup.procs等，文件内容是该task所属进程的PID；
/proc/{PID号}/cgroup文件表示这个进程涉及到的所有cgroup子系统的信息
常见的Cgroups子系统
  CPU 子系统，用来限制一个控制组（一组进程，你可以理解为一个容器里所有的进程）可使用的最大 CPU，配合cfs（完全公平调度算法）实现CPU的分配和管理。
cpu share：用于cfs中调度的权重，条件相同的情况下，cpushare值越高，分得的时间片越多。
cpu set：主要用于设置CPU的亲和性，可以限制cgroup中的进程只能在指定的CPU上运行，或者不能在指定的CPU上运行，同时cpuset还能设置内存的亲和性。
  memory 子系统，用来限制一个控制组最大的内存使用量。
  pids 子系统，用来限制一个控制组里最多可以运行多少个进程。
  cpuset 子系统， 这个子系统来限制一个控制组里的进程可以在哪几个物理 CPU 上运行。</description>
    </item>
    
  </channel>
</rss>
