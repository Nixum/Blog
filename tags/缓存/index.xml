<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on Nixum Blog</title>
    <link>http://nixum.cc/tags/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on Nixum Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://nixum.cc/tags/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redis</title>
      <link>http://nixum.cc/p/redis/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/redis/</guid>
      <description>[TOC]
数据类型及结构 Redis里存的key和value都是二进制数据，即 byte数组，本身是二进制安全的（二进制安全的意思是，存进去怎么样，取出来就是怎么样，程序不会对原始数据进行任意的操作）
数据类型 具体的分为5种基本类型和3种特殊类型：
String、List(一般当成队列，尽量少使用随机读写)、Hash、Set、ZSet
  String：简单动态字符串(SDS)
场景：缓存（可以使用json、protobuf等进行序列化反序列化、也可以通过key来分离缓存对象的属性，实现hash的效果，只是是单字段罢了）、token、限流、分布式id
  List：压缩列表（元素数量小于512，且所有元素的长度都小于64字节） + 双向链表，高版本是快表（其他情况使用）
场景：用户消息时间线、消息队列
  Hash：压缩列表（元素数量小于512，且key和value字符串长度都小于64字节） + 哈希表（其他情况使用）
场景：存储对象缓存（可以更方便get、set对应字段）、根据key进行统计
  Set：数组（带有编码类型字段，所以元素可以使用整型表示，少于512个时使用）+ 哈希表（key为set中的元素，value为null，其他情况使用）
场景：交集、并集、点赞、签到、随机弹出获取元素
  ZSet：压缩列表（元素小于128个，且所有元素的长度小于64字节时使用） + 跳表 （其他情况使用）
场景：排行榜
  另外三种扩展类型：
  Bitmap：位存储，基于String，原理：String类型会保存二进制字节数组，只有0和1两个值，对于这个字节数组的每个bit来表示一个元素的二值状态；
场景：二值统计，如签到统计、记录每个月签到情况、判断用户登录状态
  HyperLogLog：基数统计，类似set，不断往里add值，然后判断有总数量；主要作用是使用少量固定的内存（12KB内存即可统计2^64个不同元素）去存储并识别有大量元素的集合中的唯一元素，能快速算出集合内的元素个数，误差率0.81%；版本2.8.9之后才有
场景：百万级别网络的UV计数
  Geo：推算地理位置，比如两地之间的距离，方圆几里的人；版本3.2之后才有
  Stream：5.0之后的版本才有，Stream会在第一次使用 xadd 指令追加消息时自动创建。
 Consumer Group：消费组，一个消费组有多个消费者，这些消费者是竞争关系； Last_delivered_id：游标，每个消费组的游标，组内任意一个消费者读取了消息都会使游标向前移动； pending_ids：消费者的状态变量，用于维护消费者未确认的id，记录当前已经被客户端读取但还没有被ACK的消息。如果客户端没有ACK，这个变量里面的消息ID会越来越多，一旦某个消息被ACK，它就开始减少，用来确保客户端至少消费了消息一次，而不会在网络传输的中途丢失了没处理。 消息ID：组成方式毫秒级时间戳 - 序号，消息ID也可以自定义，但必须是整数-整数，且能后面加入的消息ID要大于前面的消息ID。Redis本身会记录 lastest_generated_id，防止时间回拨导致ID问题； 消息内容：键值对，类似Hash的结构；     
底层数据结构 Redis所有类型有一个顶层的数据结构叫RedisObject，这个RedisObject底层对应着具体对象类型和其编码方式。</description>
    </item>
    
  </channel>
</rss>
