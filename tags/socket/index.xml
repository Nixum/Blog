<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>socket on Nixum Blog</title>
    <link>http://nixum.cc/tags/socket/</link>
    <description>Recent content in socket on Nixum Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://nixum.cc/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络</title>
      <link>http://nixum.cc/p/%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/%E7%BD%91%E7%BB%9C/</guid>
      <description>[TOC]
从浏览器输入URL之后都发生了什么 浏览器输入URL，按回车，
 浏览器根据输入内容，匹配对应的URL和关键词，校验URL的合法性，补全URL，使其符合通用URI的语法。 请求发出前，如果当前的URL被访问过，会先进入缓存中查询是否有要请求的文件，有则直接返回；如果没有，则跳过缓存，进入网络操作。缓存会存在于路由缓存、DNS缓存、浏览器缓存、ServiceWorker、MemoryCache、DiskCache、PushCache、系统缓存等。 从URL中解析出域名，依次经过浏览器缓存、系统缓存、hosts 文件、路由器缓存、 递归搜索DNS服务器，找到对应的IP地址。 应用层程序准备好数据后，委托给操作系统，复制应用层数据到内核的内存空间中，交给网络协议栈（将其打包为tcp包(传输层)，帧(数据链路层)，并数据其从内核拷贝到网卡，后续由网卡负责数据的发送）建立 TCP/IP 连接（三次握手具体过程）。 HTTP 请求经过路由器的转发，通过服务器（CDN、反向代理之类的）的防火墙，该 HTTP 请求到达了服务器 服务器处理该 HTTP 请求，返回一个 HTML 文件 浏览器解析该 HTML 文件，解析HTML文件后，构建dom树 -》构建render树 -》布局render树 -》绘制 render树，自上而下加载，边加载边解析渲染，显示在浏览器端，对于图片音频等则是异步加载  本质上是OSI七层模型 + 相应协议、组件实现
HTTP方法 菜鸟HTTP教程/HTTP请求方法
Get和Post的区别   语义上的区别，Get一般表示查询、获取，Post是更新
  Get具有幂等性，Post没有
  参数传递方面，Get一般参数接在Url上，对外暴露，有长度限制（1024个字节即256个字符），只接收ASCII字符，需要进行url编码
Post参数放在request body里，支持多种编码
  GET请求会被浏览器主动cache，而POST不会，除非手动设置
  GET产生的URL地址可以加入书签，而POST不可以
  GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留
  GET在浏览器回退时是无害的，而POST会再次提交请求
  其实本质都是一种协议的规范，规定参数的存放位置，参数长度大小等，当然也可以反着来，只要服务器能够理解即可
幂等性：同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的，每次返回的结果一样，不产生副作用；
根据语义，简单的把get看成查询，只要服务器的数据没变，每次查询得到的结果是一样的，而把post看成添加，每次post请求都会创建新资源，服务器状态改变
具有幂等性的方法：GET、HEAD、OPTIONS、DELETE、PUT
没有幂等性的方法：POST
安全性：安全的 HTTP 方法不会改变服务器状态，也就是说它只是可读的。
常见状态码 参考HTTP状态码</description>
    </item>
    
  </channel>
</rss>
