<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程 on Nixum Blog</title>
    <link>http://nixum.cc/tags/%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 线程 on Nixum Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Mar 2019 00:00:00 +0000</lastBuildDate><atom:link href="http://nixum.cc/tags/%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java并发</title>
      <link>http://nixum.cc/p/java%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sat, 02 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/java%E5%B9%B6%E5%8F%91/</guid>
      <description>[TOC]
Java线程的状态 1.状态转换  线程状态转换 
“阻塞”与“等待”的区别： “阻塞”状态是等待着获取到一个排他锁，进入“阻塞”状态都是被动的，离开“阻塞”状态是因为其它线程释放了锁，不阻塞了； “等待”状态是在等待一段时间 或者 唤醒动作的发生，进入“等待”状态是主动的
2. 状态  New（新建）：通过new创建一个新线程，但还没运行，还有一些其他基础工作要做 Runnable（可运行，就绪）：线程调用start方法，可能处于正在运行也可能处于没有运行，取决于操作系统提供的运行时间 Running（运行） Blocked（阻塞）：线程已经被挂起，等待锁的释放，直到另一个线程走完临界区或发生了相应锁对象wait()操作后，它才有机会去争夺进入临界区的权利  等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。 其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。   Waiting（无限期等待）： 处于此状态的线程会等待另外一个线程，不会被分配CPU执行时间，直到被其他线程唤醒  没有设置timeout参数的Object.wait() 没有设置timeout参数的Thread.join() LockSupport.park() 以上方法会使线程进入无限等待状态   Timed_waiting（限期等待）：不会被分配CPU执行时间，不过无需等待被其它线程显示的唤醒  Thread.sleep()方法 设置了timeout参数的Object.wait()方法 设置了timeout参数的Thread.join()方法 LockSupport.parkNanos()方法 LockSupport.parkUntil()方法   TERMINATED（结束，死亡）：已终止线程的线程状态，线程已经结束执行，run()方法走完了，线程就处于这种状态或者出现没有捕获异常终止run方法意外死亡  死锁 死锁产生的条件  互斥条件：一个资源每次只能被一个线程使用； 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放； 不剥夺条件：进程已经获得的资源，在未使用完之前，不能强行剥夺； 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。  避免死锁 一般场景发生在共享资源的使用上：
 线程1对资源A加锁后，进行业务操作，线程2对资源B加锁后进行业务操作，线程1业务处理需要用到资源B，线程2业务处理需要用到资源A，此时发生死锁 线程1对资源A加锁后进行业务操作，线程2也需要用到资源A，但是线程1一直不释放锁，  互斥条件是保证线程安全的条件，因此不能破环，只能尽量破坏其他造成死锁的条件，比如提前分配各个线程所需资源；设置等待时间或者自旋次数，超时中断；分配好获得锁的顺序；避免逻辑中出现复数个线程相互持有对方线程所需的独占锁的情况；
比如:
 在合适的场景使用合适的锁类型，是否允许锁可重入的，共享还是排他 避免多个线程操作多个共享资源，注意锁的申请顺序，比如给资源设置序号，顺序取放 获取锁时设置超时时间 减少共享资源的使用，使用ThreadLocal，消息队列，共享资源在方法内复制(set回去的时候cas)，或者设计一种模式对共享资源的访问 jstack检查线程与状态  死锁检测工具 Jconsole, Jstack, visualVM</description>
    </item>
    
  </channel>
</rss>
